version: '3.8'

services:
    proxy:
        image: nginx:latest # 최신 버전의 Nginx 사용
        container_name: proxy # container 이름은 proxy
        ports:
            - '80:80' # 80번 포트를 host와 container 맵핑
        networks:
            - nestjs-network
        volumes:
            - ./proxy/nginx.conf:/etc/nginx/nginx.conf # nginx 설정 파일 volume 맵핑
        restart: 'unless-stopped' # 내부에서 에러로 인해 container가 죽을 경우 restart
    dev:
        container_name: nestjs_api_dev
        image: nestjs-api-dev:1.0.0
        build:
            context: .
            target: development
            dockerfile: ./Dockerfile
        command: node dist/src/main #node dist/src/main #n
        # ports:
        #     - 3000:3000
        expose:
            - '3000' # 다른 컨테이너에게 3000번 포트 open
        networks:
            - nestjs-network
        volumes:
            - .:/usr/src/app
            - /usr/src/app/node_modules
        restart: unless-stopped
    prod:
        container_name: nestjs_api_prod
        image: nestjs-api-prod:1.0.0
        build:
            context: .
            target: production
            dockerfile: ./Dockerfile
        command: npm run start:dev
        ports:
            - 3000:3000
            - 9229:9229
        networks:
            - nestjs-network
        volumes:
            - .:/usr/src/app
            - /usr/src/app/node_modules
        restart: unless-stopped
    # jenkins:
    #     build:
    #         context: .
    #         dockerfile: ./jenkins/Dockerfile
    #     image: jenkins/jenkins
    #     restart: always
    #     container_name: jenkins
    #     user: root
    #     environment:
    #         - JENKINS_OPTS="--prefix=/jenkins"
    #     ports:
    #         - 8080:8080
    #     expose:
    #         - '8080'
    #     networks:
    #         - nestjs-network
    #     volumes:
    #         - ./jenkins_home:/var/jenkins_home
    #         - /var/run/docker.sock:/var/run/docker.sock
    #     environment:
    #         TZ: 'Asia/Seoul'
networks:
    nestjs-network:
