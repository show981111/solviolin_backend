user nginx;
worker_processes  1;

error_log  /var/log/nginx/error.log warn;
pid        /var/run/nginx.pid;

events {                     
    worker_connections  1024;
}     

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    upstream docker-express { # 1
        #server nestjs_api_dev:3000;  #docker-compose.yml 에 있는 container name
        server ${API_HOST}:3000;  #docker-compose.yml 에 있는 container name
    }

    # upstream docker-jenkins { # 2
    #     server jenkins:8080;  #docker-compose.yml 에 있는 container name
    #     keepalive 32;
    # }

    server {
        listen 80;
        server_name xn--sy2bt7bxwhpof3wb.com;

        location / {
            return 301 https://$host$request_uri;
            # proxy_hide_header Access-Control-Allow-Origin;
            # add_header 'Access-Control-Allow-Origin' '*';
		    # proxy_http_version 1.1;
            # proxy_pass http://docker-express; #client 요청 오면 위의 upstream 으로 포워딩
        }

        location /.well-known/acme-challenge/ {
            root /var/www/certbot;
        }

        # location ^~ /jenkins/ {
		#     # proxy_http_version 1.1;
        #     # proxy_pass http://docker-jenkins/jenkins; #client 요청 오면 위의 upstream 으로 포워딩
        #     # Convert inbound WAN requests for https://domain.tld/jenkins/ to 
        #     # local network requests for http://10.0.0.100:8080/jenkins/
        #     proxy_pass http://docker-jenkins/jenkins/;
            
        #     # Rewrite HTTPS requests from WAN to HTTP requests on LAN
        #     proxy_redirect http:// https://;

        #     # The following settings from https://wiki.jenkins-ci.org/display/JENKINS/Running+Hudson+behind+Nginx
        #     sendfile off;

        #     proxy_set_header   Host             $host:$server_port;
        #     proxy_set_header   X-Real-IP        $remote_addr;
        #     proxy_set_header   X-Forwarded-For  $proxy_add_x_forwarded_for;
        #     proxy_max_temp_file_size 0;

        #     # This is the maximum upload size
        #     client_max_body_size       10m;
        #     client_body_buffer_size    128k;

        #     proxy_connect_timeout      90;
        #     proxy_send_timeout         90;
        #     proxy_read_timeout         90;

        #     proxy_temp_file_write_size 64k;
    
        #     # Required for new HTTP-based CLI
        #     proxy_http_version 1.1;
        #     proxy_request_buffering off;
        #     proxy_buffering off; # Required for HTTP-based CLI to work over SSL
        # }

    }

    server {
        listen 443 ssl;
        server_name xn--sy2bt7bxwhpof3wb.com;
        
        location / {
            proxy_hide_header Access-Control-Allow-Origin;
            add_header 'Access-Control-Allow-Origin' '*';
		    proxy_http_version 1.1;
            proxy_pass http://docker-express; #client 요청 오면 위의 upstream 으로 포워딩
        }

        ssl_certificate /etc/letsencrypt/live/xn--sy2bt7bxwhpof3wb.com/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/xn--sy2bt7bxwhpof3wb.com/privkey.pem;
    }

    include /etc/letsencrypt/options-ssl-nginx.conf;
    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';


    access_log  /var/log/nginx/access.log  main;
                                                
    sendfile        on;                                                                         
    keepalive_timeout  65;                                                                      
    include /etc/nginx/conf.d/*.conf;           
}